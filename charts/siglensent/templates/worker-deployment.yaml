apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: worker-deployment
  namespace: {{ .Values.global.namespace }}
  labels:
    cluster: {{ .Values.clusterName }}
spec:
  replicas: {{ .Values.worker.deployment.replicas }}
  volumeClaimTemplates:
  - metadata:
      name: data-volume
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.storageClass.worker.name | default "gcp-pd-rwo" }}
      resources:
        requests:
          storage: {{ .Values.pvc.size }}
  selector:
    matchLabels:
      app: worker-node
  template:
    metadata:
      labels:
        app: worker-node
        cluster: {{ .Values.clusterName }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "2222"
        prometheus.io/path: "/metrics"
        checksum/config: sha256-checksum-placeholder
    spec:
      terminationGracePeriodSeconds: 300
      serviceAccountName: {{ .Release.Name }}-service-account
      initContainers:
      - name: volume-permissions
        image: busybox
        command:
          - 'sh'
          - '-c'
          - |
            if [ ! -d /siglens/data ]; then
              echo "Directory does not exist. Creating /siglens/data"
              mkdir -p /siglens/data
              echo "Setting ownership of new directory to 1000:1000"
              chown 1000:1000 /siglens/data
            elif [ "$(stat -c '%u:%g' /siglens/data)" != "1000:1000" ]; then
              echo "Incorrect ownership detected: $(stat -c '%u:%g' /siglens/data). Changing to 1000:1000"
              chown -R 1000:1000 /siglens/data
              echo "Ownership change completed"
            else
              echo "Directory exists with correct ownership (1000:1000). No changes needed."
            fi
        volumeMounts:
        - name: data-volume
          mountPath: /siglens/data
      containers:
      - name: worker-container
        image: {{ .Values.registry.image }}
        imagePullPolicy: {{ .Values.registry.imagePullPolicy }}
        command: ["/siglens/sigscalr"]
        args: ["--config", "/config/server.yaml"]
        ports:
        - containerPort: {{ .Values.worker.deployment.ports.ingest }}
        lifecycle:
          preStop:
            exec:
              command:
                - '/bin/sh'
                - '-c'
                - |
                  if [ "$(cat /siglens/SHUTDOWN_MODE)" = "quick" ]; then
                    echo "Quick shutdown requested. Sending SIGUSR1"
                    kill -SIGUSR1 1
                  else
                    echo "Normal shutdown requested. Sending SIGTERM"
                    kill -SIGTERM 1
                  fi
        resources:
          requests:
            cpu: {{ .Values.worker.deployment.cpu.request }}             
            memory: {{ .Values.worker.deployment.memory.request }}      
          limits:
            cpu: {{ .Values.worker.deployment.cpu.limit }}              
            memory: {{ .Values.worker.deployment.memory.limit }}
        env:
        {{- if .Values.config.s3.enabled }}
        {{- if eq .Values.config.blobStoreMode "S3" }}
        {{- if .Values.config.s3.accessThroughAwsKeys }}
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-keys
              key: aws_access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-keys
              key: aws_secret_access_key 
        {{- end}}
        {{- else if eq .Values.config.blobStoreMode "GCS" }}
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: "/var/secrets/google/key.json"
        - name: STORAGE_BACKEND
          value: "gcs"
        {{- end }}      
        {{- end }}
        volumeMounts:
        - mountPath: /siglens/data
          name: data-volume
        - mountPath: /config
          name: worker-config
        - mountPath: /license
          name: license-volume
        {{- if .Values.config.tls.enabled }}
        - mountPath: /certs
          name: cert-volume
        {{- end }}
        {{- if and .Values.config.s3.enabled (eq .Values.config.blobStoreMode "GCS") }}
        - mountPath: /var/secrets/google
          name: gcs-key
        {{- end }}
      volumes:
      - name: worker-config
        configMap:
          name: worker-configmap
      - name: license-volume
        secret:
          secretName: {{ .Release.Name }}-license-secret
          items:
          - key: license
            path: license.txt
        {{- if .Values.config.tls.enabled }}
      - name: cert-volume
        secret:
          secretName: {{ .Values.ingress.tlsSecret }}
        {{- end }}
      {{- if and .Values.config.s3.enabled (eq .Values.config.blobStoreMode "GCS") }}
      - name: gcs-key
        secret:
          secretName: gcs-key
      {{- end }}
