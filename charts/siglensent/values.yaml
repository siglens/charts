global:
  namespace: siglensent
# Overrides for the ingress-nginx subchart.
ingress-nginx:
  namespaceOverride: siglensent

# Overrides for the cert-manager subchart.
cert-manager:
  namespace: siglensent

queryHost: siglens.example.com
ingestHost: ingest.siglens.example.com
queryHostWithPort: siglens.example.com:443

clusterName: siglens-enterprise

pvc:
  size: 20G    # Size of the PVC for the Worker node

# StorageClass configuration for worker and raft StatefulSets
# You can set global defaults under storageClass.<key>, or override per component (worker/raft)
# StorageClass names must be unique per cluster
storageClass:
  # Shared defaults (used unless overridden in worker/raft)
  provisioner: pd.csi.storage.gke.io      # GCP: pd.csi.storage.gke.io | AWS: ebs.csi.aws.com
  diskType: pd-standard                   # GCP: pd-standard, pd-ssd | AWS: gp2, gp3
  reclaimPolicy: Retain                   # Retain | Delete
  allowVolumeExpansion: true
  volumeBindingMode: WaitForFirstConsumer

  worker:
    name: gcp-pd-rwo                      # Unique StorageClass name for worker PVCs
    # provisioner: pd.csi.storage.gke.io    # (Optional) override global provisioner
    # diskType: pd-ssd                      # (Optional) override global diskType
    # reclaimPolicy: Delete              # (Optional) override global reclaimPolicy
    # allowVolumeExpansion: true            # (Optional) override global allowVolumeExpansion
    # volumeBindingMode: WaitForFirstConsumer # (Optional) override global volumeBindingMode

  raft:
    name: gcp-pd-standard-rwo             # Unique StorageClass name for raft PVCs
    # provisioner: pd.csi.storage.gke.io    # (Optional) override global provisioner
    # diskType: pd-standard                 # (Optional) override global diskType
    # reclaimPolicy: Delete              # (Optional) override global reclaimPolicy
    # allowVolumeExpansion: true            # (Optional) override global allowVolumeExpansion
    # volumeBindingMode: WaitForFirstConsumer # (Optional) override global volumeBindingMode



ingestService:
  selector:
    app: worker-node
  port: 8081
  targetPort: 8081

queryService:
  selector:
    app: worker-node
  port: 5122
  targetPort: 5122

ingress:
  tlsSecret: ingress-tls

# If TLS is enabled, these settings are used to gererate a certificate.
acme:
  useProductionCertificate: true
  registrationEmail: "you@example.com"

# Enterprise images require a license. To specify your license, set
# "licenseBase64" to the output of `cat /path/to/licenseKey.txt | base64`.
secrets:
  licenseBase64: ""

# Annotations for pod privileges. Needed for setups with S3 (which is required
# for multinode) so the pods can read and write to S3.
serviceAccountAnnotations:
  # AWS example:
  # eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/YourRole
  #
  # GCP example:
  # iam.gke.io/gcp-service-account: your-service-account@project-123.iam.gserviceaccount.com

# You can add other configs here that siglens supports (e.g., from your
# server.yaml used to run siglens locally)
#
# Note: Don't include any of the following keys even though you may have them
# in your server.yaml; they are already set by the Helm chart if needed:
# - isIngestNode
# - isQueryNode
# - etcd
config:
  tls:
    enabled: true
    certificatePath: /certs/tls.crt
    privateKeyPath: /certs/tls.key

  # Address port for SigLens ingestion server
  ingestPort: 8081

  # Address port for SigLens query server, including UI
  queryPort: 5122

  # Location for storing local node data
  dataPath: data/

  # field name to use as a timestamp key
  timestampKey: timestamp

  # Where the license is stored within the container
  licenseKeyPath: /license/license.txt

  raft:
    ssInstanceName: "raft-node"
  worker:
    ssInstanceName: "worker-node"

  rbac:
    # Postgres configuration for RBAC
    dbname: db1
    host: ""
    port: 5432
    user: ""
    password: ""

  blobStoreMode: "none"  # Valid opations are: S3, GCS, none, or ""

  s3:
    enabled: false   # Set to true if you want to use either S3 or GCS
    bucketName: ""
    bucketPrefix: ""
    regionName: ""
  gcs:
    bucketName: ""
    bucketPrefix: ""
    regionName: ""
  
  emailConfig: # Email configuration for sending email notifications
    smtpHost: smtp.gmail.com
    smtpPort: 587
    senderEmail: username@domain.com
    gmailAppPassword: appPassword

  saas:
    enabled: false # Set to true and fill in the following fields to enable SaaS
    googleAuth:
      clientId: ""
      clientSecret: ""
      callbackUrl: ""
    githubAuth:
      clientId: ""
      clientSecret: "" 
      callbackUrl: ""

raft:
  deployment:
    replicas: 1 # Number of replicas for the Raft server
    ports:
      raft: 2379
    cpu:
      request: "1" # Request number of vCPUs for the Raft node
      limit: "2" # Max limit of vCPUs for the Raft node
    memory:
      request: "2G" # Request RAM size for the Raft node
      limit: "4G" # Max limit of RAM for the Raft node
    storage:
      size: "10G" #  Storage for the Raft node

worker:
  deployment:
    replicas: 3 # Number of replicas for the Worker server
    ports:
      ingest: 8081
    cpu:
      request: "6" # Request number of vCPUs for the worker node
      limit: "8" # Max limit of vCPUs for the worker node
    memory:
      request: "12G" # Request RAM size for the worker node
      limit: "16G" # Max limit of RAM for the worker node


registry:
  # dockerConfigBase64 is used for pulling the SigLens image from a private registry.
  # Not needed for public registries. If you're using a private registry, set this to the output
  # of `cat ~/.docker/config.json | base64`.
  dockerConfigBase64: ""
  image: ghcr.io/sigscalr/hyperion:v1.0.29-ent5
  imagePullPolicy: Always
